<chapter id="modules">
  <title>Modules</title>

  <section id="modules.introduction">
    <title>Introduction</title>
    <para>
      This section describes Phorum's module system. It is targeted at
      developers who want to do customization and extend the functionality
      of Phorum. Modules are the preferred way to archieve this.
    </para>
    <para>
      For much of this document, we will be talking about an example module
      "foo". Of course you will not name your module "foo", but something much
      more appropriate. If you're not familiar with the terms "foo" and "bar",
      you can visit <ulink url="http://en.wikipedia.org/wiki/Metasyntactic_variable">Wikipedia</ulink> to see why we chose them.

    </para>
    <para>
      <remark>TODO: Link to section once it's ready</remark>
      Be sure to read at least the CAUTIONS AND SECURITY ISSUES section,
      before making your own modules.
    </para>
  </section>

  <section id="modules.terminology">
    <title>Terminology</title>

    <section id="modules.modules">
      <title>Modules</title>
      <para>
        Modules are self contained pieces of software, that can be added to
        Phorum to change or extend its functionality. Modules can do this
        without having to change anything in the standard Phorum distribution
        files or database structure.
      </para>
      <para>
        The big advantage of modules this is that upgrading the Phorum code
        is easy (no file changes to redo after upgrading) and that modules
        can be easily uninstalled when needed.
      </para>
      <para>
        Installing a module means: drop the code in the Phorum mods directory,
        go to the admin "Modules" page, enable the module and enjoy!
        One additional thing that might be needed, is editing one or
        more template files to display data that is generated by the module.
      </para>
    </section>

    <section id="modules.hacks">
      <title>Hacks</title>
      <para>
        The moment it is neccessary to make changes to the standard Phorum
        distribution files or database structure to implement some kind of
        functionality, we are talking about a hack (even if the changes
        that have to be made are accompanied by a drop in module).
      </para>
      <para>
        Although there is nothing wrong with writing hacks, the Phorum team
        wants to urge you to try if you can write a module before resorting
        to a hack. Especially if you are going to publish your changes to
        the public. Modules are the preferred way of modifying Phorum
        functionality, because that will make both upgrading your distribution
        and having your modification adopted by others easier.
      </para>
    </section>

    <section id="modules.hooks">
      <title>Hooks</title>
      <para>
        The Phorum core and Phorum modules are interconnected through hooks.
        Hooks are points in the application where Phorum stops and runs
        its data through the modules that are configured to handle the
        hook. The modules can act upon and change this data.
      </para>
      <para>
        The following image visualizes what happens when Phorum reaches
        a hook point in the application, for which two modules ("foo" and
        "bar") have been configured.
      <literallayout><literal><![CDATA[
     Phorum
   Application
       (1)                                (1) Phorum is running.
        |                                 (2) Phorum reaches the
        |                                     hook named "some_hook".
        v           Phorum                (3) Phorum sends data to
    some_hook >----- data ------+             the module system.
       (2)            (3)       |         (4) The module "foo" is run.
                                v         (5) The module "bar" is run.
                       (4) module "foo"   (6) The Phorum data (which
                                |             might be modified by the
                                v             modules) is sent back
                       (5) module "bar"       to Phorum.
                                |         (7) Phorum continues running
     Phorum        Modified     |             with the modified data.
   Application <---- data ------+
       (7)            (6)
        |
        |
        v
]]></literal></literallayout>
      </para>
    </section>

    <section id="modules.hookfunctions">
      <title>Hook functions</title>
      <para>
        A module contains PHP functions that act as hook functions.
        Hook functions will receive some data from Phorum
        through their arguments and have to return the (possibly modified)
        data, which will then go either back to Phorum or to the input
        of another module which also handles the same hook
        (see <xref linkend="modules.hooks"/>).
        Based on this, the most basic (and useless) hook function you could
        write would look somewhat like this (see XXX for an explanation
        of the naming scheme that was used for the function):
        <programlisting><![CDATA[
function phorum_mod_foo_some_hook ($data) {
  return $data;
}]]></programlisting>
      </para>
      <para>
        The exact nature of the data that is sent to the hook functions
        depends solely on the hook that is run. See <xref linkend="hooks"/>
        for a description of all supported hooks, including a specification
        of the type of data that is sent.
      </para>
    </section>

  </section>

  <section id="modules.writingyourown">
    <title>Writing your own modules</title>

    <section id="modules.moduleinfo">
      <title>Module information</title>
      <para>
        Module information is the glue between your module and Phorum.
        It provides information to Phorum about your module.
        Before we explain how to add this module information to your
        module, we will first explain what data can be put in there
        and how that data is formatted.
      </para>
      <para>
        Module information is formatted using lines of plain text. Each line
        contains a piece of information about the module. The general format
        for each of the lines in the module information is:
        <programlisting><![CDATA[ <key>: <value> ]]></programlisting>
        Empty lines are allowed between these key/value pairs.
        Below, you can find a list of the keys and values that can be
        used in the module information.
        <table id="modules.moduleinfokeys">
          <title>Keys and values in module information</title>
          <tgroup cols="2">
          <thead>
            <row>
              <entry>&lt;key&gt;</entry>
              <entry>&lt;value&gt;</entry>
            </row>
          </thead>
          <tbody>

            <row>
              <entry>
                <emphasis role="bold">title</emphasis>
              </entry>
              <entry>
                <para>
                  This is the title for the module that is displayed in the
                  "Modules" page of the admin interface.
                </para>
                <para>
                  Example:<sbr/>
                  <literal>title: Foo</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <emphasis role="bold">desc</emphasis>
              </entry>
              <entry>
                <para>
                  This is the description that is displayed along with the
                  title in the admin interface, to give a little more
                  information about the module. Using HTML in the
                  &lt;value&gt; part is allowed.
                </para>
                <para>
                  Example:<sbr/>
                  <literal>desc: This is a very cool module to do stuff.</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <emphasis role="bold">hook</emphasis>
              </entry>
              <entry>
                <para>
                  This describes which
                  <xref linkend="modules.hookfunctions"
                        xrefstyle="template:hook functions"/>
                  are called for which Phorum hooks. The value consists of
                  two fields, separated by a pipe "|" symbol. The first
                  field contains the name of the hook that this module is
                  hooking into. The second field contains the name of the
                  hook function that will be called for the hook.
                </para>
                <para>
                  Example:<sbr/>
                  <literal>hook: some_hook|phorum_mod_foo_some_hook</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <emphasis role="bold">priority</emphasis>
              </entry>
              <entry>
                <para>
                  This can be used for changing priorities and dependancies
                  for modules and hooks. Possible values are (in order in
                  which they are processed):
                  <itemizedlist>
                    <listitem><literal>
                      run module before|after *
                    </literal></listitem>
                    <listitem><literal>
                      run module before|after &lt;other module name&gt;
                    </literal></listitem>
                    <listitem><literal>
                      run hook &lt;hook name&gt; before|after *
                    </literal></listitem>
                    <listitem><literal>
                      run hook &lt;hook name&gt; before|after &lt;other module name&gt;
                    </literal></listitem>
                  </itemizedlist>
                </para>
                <para>
                  Examples:<sbr/>

                  <para>
                    Run this module before all other modules:<sbr/>
                    <literal>
                      priority: run module before *
                    </literal>
                  </para>

                  <para>
                    Run this module before the bbcode module.<sbr/>
                    <literal>
                      priority: run module before bbcode
                    </literal>
                  </para>

                  <para>
                    Run the "format" hook for this module before the
                    "format" hook of the smileys module.<sbr/>
                    <literal>
                      priority: run hook format before smileys
                    </literal>
                  </para>

                  <para>
                    Run the "after_header" hook for this module after all
                    other "after_header" hooks.<sbr/>
                    <literal>
                      priority: run hook after_header after *
                    </literal>
                  </para>
                </para>

                <para>
                  The main difference between "run module" and "run hook"
                  is that "run module" will affect the priority for each
                  hook of the module and that "run hook" is used to
                  specifically change the priority of a single hook.
                  So to run all hooks for a module as early as possible,
                  but run the "foo" hook as late as possible and the
                  "bar" hook before the smileys mod, one could use the
                  following priority lines:
                </para>
                <para>
                  <literal>
                  priority: run module before *<sbr/>
                  priority: run hook foo after *<sbr/>
                  priority: run hook bar before smileys
                  </literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <emphasis role="bold">require_version</emphasis>
              </entry>
              <entry>
                <para>
                  This describes which phorum version is required to use
                  this module. Modules with a requirement above the current
                  phorum version are automatically disabled when going to
                  the modules page. This feature was added in Phorum 5.2.
                </para>
                <para>
                  Example:<sbr/>
                  <literal>require_version: 5.2.2</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <emphasis role="bold">
                  author<sbr/>
                  url<sbr/>
                  version<sbr/>
                  release_date
                </emphasis>
              </entry>
              <entry>
                <para>
                  These fields are all informational. The information
                  from these fields will be shown on the Modules admin
                  page. You are allowed to omit these fields from the
                  module information, but we advice you to fill them to
                  provide as much useful info to the users of your module.
                </para>
                <para>
                  The fields are free form. The "url" field should contain
                  a URL to a page where more information about the module
                  can be found. This can for example be a dedicated page
                  about your module or a discussion page in the phorum.org
                  support forums.
                </para>
                <para>
                  Example:<sbr/>
                  <literal>
                    author: John Doe, Phorum hacker<sbr/>
                    url: http://example.com/phorum/mod_foo/<sbr/>
                    version: 0.9.1-alpha<sbr/>
                    release_date: May 17th, 2007
                  </literal>
                </para>
              </entry>
            </row>

          </tbody>
          </tgroup>
        </table>
      </para>

      <para>
        It is allowed to use multiple hook lines in your module information,
        so your module can act upon multiple hooks. When doing this, it
        is also allowed to use the same hook function for handling different
        hooks in your module (asuming the hooks are compatible).
      </para>
      <para>
        Here is an example of what the module information for our example
        module "foo" might look like:
        <example id="example.moduleinfo">
          <title>Module information</title><programlisting><![CDATA[
title: Foo
desc: This is the Foo module for Phorum. Nothing exciting...
version: 1.0.2
release_date: Jan 1st, 2008
url: http://www.phorum.org
author: John Doe <johndoe@example.com>
require_version: 5.2.2

hook: some_hook|phorum_mod_foo_some_hook
hook: some_other_hook|phorum_mod_foo_some_other_hook
hook: yet_another_hook|phorum_mod_foo_some_other_hook

priority: run some_hook before some_other_module]]></programlisting>
        </example>

        What this module info does, is telling Phorum that when it gets to
        "some_other_hook", it will have to call the function
        <literal>phorum_mod_foo_some_other_hook()</literal> in your module.
        It also tells that for "yet_another_hook" the same function has to
        be called. It will also take care that the hook "some_hook" is run
        before the same hook in the module "some_other_module".
      </para>

    </section>

    <section id="modules.structure">
      <title>Module structure</title>

        <section id="modules.structureintro">
          <title>Introduction</title>
          <para>
            <xref linkend="modules.hookfunctions"
                  xrefstyle="template:Hook functions"/>
            and
            <xref linkend="modules.moduleinfo"
                  xrefstyle="template:module information"/>
            are all the parts needed for creating a working module. However,
            your module might need extra stuff like template, language and
            image files. You can store these files along with your module when
            using the
            <xref linkend="modules.multifile"
                  xrefstyle="template:multiple file module structure"/>
          </para>
          <para>
            If you do not need to store any other stuff with your module, you
            can also choose to use the
            <xref linkend="modules.singlefile"
                  xrefstyle="template:single file module structure"/>
          </para>
        </section>

        <section id="modules.singlefile">
          <title>Single file modules</title>
          <para>
            Single file modules are useful in case case no additional files
            have to be distributed with your module. Because the module
            consists of only one single file, it is very easy to distribute.
            Beware though that the moment that you want to support for
            example a settings screen, multiple languages or custom images,
            you will have to switch to the multiple file module structure.
            Switching does mean some extra work for your users. So only use
            this format for modules for which you are sure that you do not
            need additional files in the future.
          </para>
          <para>
            Single file modules consist of one single PHP file. The name
            of this file is not restricted. We advice you to use
            <filename>mod_&lt;module name&gt;.php</filename> though
            for clarity and consitency with other module
            (e.g. <filename>mod_foo.php</filename>).
            This file contains both the module information and the hook
            function definitions. For storing the module informaton, a
            special PHP comment is used. This comment must look like the
            following:
            <programlisting><![CDATA[
/* phorum module info
<module information lines go here>
*/]]></programlisting>
            Using the example module info from
            <xref linkend="example.moduleinfo"/>, the complete single
            file module would look like this (see XXX why we use the
            check on PHORUM at the start of this file):
            <example id="example.singlefilemodule">
              <title>Single file module</title>
<programlisting>
<filename>{phorum dir}/mods/mod_foo.php</filename><![CDATA[
<?php

if(!defined("PHORUM")) return;

/* phorum module info
title: Foo
desc: This is the Foo module for Phorum. Nothing exciting...
version: 1.0.2
release_date: Jan 1st, 2008
url: http://www.phorum.org
author: John Doe <johndoe@example.com>
require_version: 5.2.2

hook: some_hook|phorum_mod_foo_some_hook
hook: some_other_hook|phorum_mod_foo_some_other_hook
hook: yet_another_hook|phorum_mod_foo_some_other_hook

priority: run some_hook before some_other_module
*/

function phorum_mod_foo_some_hook ($data) {
    // Do stuff for "some_hook".
    return $data;
}

function phorum_mod_foo_some_other_hook ($data) {
    // Do stuff for "some_other_hook" and "yet_another_hook".
    return $data;
}

?>]]></programlisting>
            </example>

            Installation of a single file module is done by putting the PHP
            file (e.g. <filename>mod_foo.php</filename>) directly in the
            directory {phorum dir}/mods/ and activating the module from the
            "Modules" screen in your admin interface.
          </para>

        </section>

        <section id="modules.multifile">
          <title>Multiple file modules</title>

          <para>
            These modules are useful in case you need additional files
            to be stored with your module, for example a settings screen,
            language files or custom images.
          </para>
          <para>
            They are stored in their own subdirectory below
            the directory {phorum dir}/mods/. So if you have a module named
            "foo", you will have to create a directory
            {phorum dir}/mods/foo/ for storing all module files.
          </para>
          <para>
            Inside this subdirectory, you will have to create a least
            two files:
            <itemizedlist>
              <listitem>
                A file called <filename>info.txt</filename>.
                This file contains the module information for your module
                (see <xref linkend="modules.moduleinfo"/>).
              </listitem>
              <listitem>
                The PHP file which contains the hook function definitions
                for your module. The basename of this file should be the
                same as the name of the module subdirectory. So for our
                example module "foo", you will have to create a file named
                <filename>foo.php</filename>.
              </listitem>
            </itemizedlist>
          </para>
          <para>
            Using the example module info from
            <xref linkend="example.moduleinfo"/>, the complete multiple
            file module would look like this (see XXX why we use the
            check on PHORUM at the start of the PHP file):
            <example id="example.multifilemodule">
              <title>Multi file module</title>
<programlisting>
<filename>{phorum dir}/mods/foo/info.txt</filename><![CDATA[
title: Foo
desc: This is the Foo module for Phorum. Nothing exciting...
version: 1.0.2
release_date: Jan 1st, 2008
url: http://www.phorum.org
author: John Doe <johndoe@example.com>
require_version: 5.2.2

hook: some_hook|phorum_mod_foo_some_hook
hook: some_other_hook|phorum_mod_foo_some_other_hook
hook: yet_another_hook|phorum_mod_foo_some_other_hook

priority: run some_hook before some_other_module]]></programlisting>

<programlisting>
<filename>{phorum dir}/mods/foo/foo.php</filename><![CDATA[
<?php

if(!defined("PHORUM")) return;

function phorum_mod_foo_some_hook ($data) {
    // Do stuff for "some_hook".
    return $data;
}

function phorum_mod_foo_some_other_hook ($data) {
    // Do stuff for "some_other_hook" and "yet_another_hook".
    return $data;
}

?>]]></programlisting>

            </example>

            So far, the module has exactly same functionality as the single
            file module from <xref linkend="modules.singlefile"/>.
            From here on, the functionality can be extended. Some of the
            possibilities are:
            <itemizedlist>
              <listitem>
                Using custom files for your module
                (images, classes, libs, etc.);
              </listitem>
              <listitem>
                Letting your module support multiple languages.
                (See XXX about creation of language files)
              </listitem>
              <listitem>
                Creating a settings screen for your module;
                (See XXX about creation of settings screens)
              </listitem>
              <listitem>
                Adding template files for your module;
                (See XXX about module template files)
              </listitem>
            </itemizedlist>
          </para>

        </section>

    </section>

  </section>

</chapter>
