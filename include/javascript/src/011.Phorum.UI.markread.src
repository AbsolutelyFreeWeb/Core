// ----------------------------------------------------------------------
// UI functionality that is related to marking forums / threads as read
//
// This code implements a framework for handling "mark read" Ajax
// communication to the server. It is the task of the template author
// to implement the template specific interfacing. This interfacing
// consists of:
//
// - Handling mark read calls by calling Phorum.UI.markread(...).
// - Implementing callback functions for updating the UI after a
//   successful "mark read" Ajax call.
// ----------------------------------------------------------------------

/**
 * This function can be called from "mark read" links to handle marking
 * forums, threads or messages read through Ajax calls.
 *
 * @param string mode
 *     One of "forums", "threads" or "messages".
 *
 * @param int item_id
 *     A forum_id, thread id or message_id (which one to use depends
 *     on the "mode" parameter).
 */
Phorum.UI.markread = function (mode, item_id)
{
    // Request busy notification for the user.
    Phorum.UI.busy.increment();

    var req = {
        'call': 'markread',
        'onSuccess': function (data)
        {
            Phorum.UI.busy.decrement();

            // Call all registered new flag cleanup callback functions.
            var l = Phorum.UI.markread.callbacks;
            for (var i = 0; i < l.length; i++) {
                l[i](mode, item_id);
            }
        },
        'onFailure': function (data)
        {
            Phorum.UI.busy.decrement();
        }
    };

    // Because the "mode" is dynamic ("forums", "threads" or "messages"),
    // we have to assign this property of the request like this.
    req[mode] = [item_id];

    // Dispatch the Ajax Phorum call.
    Phorum.Ajax.call(req);

    // So "return Phorum.UI.markread(...)" can be used to cancel
    // an <a href> click.
    return false;
};

/**
 * An array of functions that need to be called when cleaning up newflags
 * through Phorum.UI.markread() is successful.
 *
 * The functions in this array will be called from the function
 * Phorum.UI.markread() with two parameters (when the markread call
 * was successful):
 * - mode = <forums|threads|messages>
 * - item_id = the forum_id, thread or message_id to clear
 *
 * Since this is an array of callback functions, modules can add extra
 * handling code for marking forums/threads/messages read (e.g. the
 * announcement module, which needs customized handling for marking
 * messages in the announcements block as read when the user clicks on
 * "mark read" for the announcement forum on the index page).
 */
Phorum.UI.markread.callbacks = [ ];

/**
 * A utility function for easy handling of newflag DOM changes.
 * This code will normally be used by mark read callback functions.
 *
 * @param string tag
 *     The name of the tags to process.
 *
 * @param string pre
 *     A prefix to check for in each DOM object's class name. This code
 *     expects that if the prefix matches, the suffix is formatted as
 *     <forum_id>[-<thread>[-<message_id>]]. E.g. with prefix "new-flag-"
 *     a DOM element could contain the class "new-flag-10-44" to identify
 *     a new flag for forum 10, thread 44.
 *
 * @param string mode
 *     The mode that was used for Phorum.UI.markread(). This is one of
 *     "forums", "threads" or "messages".
 *
 * @param integer item_id
 *     The item_id that was used for Phorum.UI.markread(). Together with
 *     the mode parameter, this parameter is used to check if a DOM
 *     element from the elts argument should be processed by the callback
 *     function.
 *
 * @param function callback
 *     A callback function that has to process matching DOM elements.
 */
Phorum.UI.markread.matchElements = function (tag, pre, mode, item_id, callback)
{
    var elts = document.getElementsByTagName(tag);
    if (!elts) {
        return;
    }

    for (var i = 0; i < elts.length; i++)
    {
        // Walk over all classes for the current element.
        var classes = elts[i].className.split(' ');
        for (var j = 0; j < classes.length; j++)
        {
            var c = classes[j];
            if (c.length)
            {
                // Check if the class starts with the provided prefix match.
                if (c.substr(0, pre.length) !== pre) {
                    continue;
                }

                // Yes, match found. The postfix is formatted as
                // <forum_id>[-<thread>[-<message_id>]]
                var parts = c.substr(pre.length).split('-');

                // Run the callback function for messages that match
                // a forum that was marked read.
                if (mode === 'forums' && parts[0] &&
                    parts[0] + '' === item_id + '') {
                    callback(elts[i]);
                }
                // Run the callback function for messages that match
                // a thread that was marked read.
                else if (mode === 'threads' && parts[1] &&
                    parts[1] + '' === item_id + '') {
                    callback(elts[i]);
                }
                // Run the callback function for messages that match
                // a message that was marked read.
                else if (mode === 'messages' && parts[2] &&
                    parts[2] + '' === item_id + '') {
                    callback(elts[i]);
                }
            }
        }
    }
};

